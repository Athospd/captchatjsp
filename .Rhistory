path = 'inst/treino/'
treino <- dplyr::bind_rows(lapply(list.files(path, full.names = TRUE),
function(x) {
d <- readRDS(x)
if (nrow(d) > 0) {
d$arq <- x
return(d)
}
}))
treino$letra <- stringr::str_match(treino$arq, ".+//([a-z])")[,
2]
d_treino <- treino %>% group_by(arq) %>% mutate(x = x -
min(x), y = y - min(y)) %>% ungroup %>% mutate(xs = sprintf("x%02d",
x), ys = sprintf("y%02d", y)) %>% unite(xy, xs, ys,
sep = "_") %>% select(arq, xy, letra) %>% spread(xy,
letra, fill = 0) %>% mutate_each(funs(ifelse(. == "0",
0, 1)), starts_with("x")) %>% mutate(letra = stringr::str_match(arq,
".+//([a-z])")[, 2])
list.files(path, full.names = TRUE)
lapply(list.files(path, full.names = TRUE),
function(x) {
d <- readRDS(x)
if (nrow(d) > 0) {
d$arq <- x
return(d)
}
})
treino <- dplyr::bind_rows(lapply(list.files(path, full.names = TRUE),
function(x) {
d <- readRDS(x)
if (nrow(d) > 0) {
d$arq <- x
return(d)
}
}))
treino
521*52
28113/52
treino$letra <- stringr::str_match(treino$arq, ".+//([a-z])")[,
2]
treino$letra
treino$arq
stringr::str_match(treino$arq, ".+//([a-z])")
stringr::str_match(treino$arq[1], ".+//([a-z])")
stringr::str_match(treino$arq[1], ".+\/([a-z])")
stringr::str_match(treino$arq[1], ".+\\/([a-z])")
sessionInfo()
x <- sessionInfo()
x$platform
x$running
x$running %>% tolower
devtools::install()
devtools::document()
devtools::document()
devtools::install()
library(dplyr)
library(tidyr)
library(tree)
library(captchatjsp)
d <- ler("arq.png")
desenhar(d)
# path <- 'inst/treino/'
# classificar(picotar(limpar(d)), 'qmiqx', path)
d_treino <- carregar_treino('inst/treino/')
d_treino$letra <- as.factor(d_treino$letra)
modelo <- tree(letra ~ ., data = select(d_treino, -arq))
cv_tree <- cv.tree(modelo)
d_treino <- carregar_treino('inst/treino/')
d_treino$letra
fix(carregar_treino)
devtools::document()
devtools::install()
library(dplyr)
library(tidyr)
library(tree)
library(captchatjsp)
d <- ler("arq.png")
desenhar(d)
# path <- 'inst/treino/'
# classificar(picotar(limpar(d)), 'qmiqx', path)
d_treino <- carregar_treino('inst/treino/')
d_treino$letra <- as.factor(d_treino$letra)
modelo <- tree(letra ~ ., data = select(d_treino, -arq))
cv_tree <- cv.tree(modelo)
fix(carregar_treino)
path = 'inst/treino/'
treino <- dplyr::bind_rows(lapply(list.files(path, full.names = TRUE),
function(x) {
d <- readRDS(x)
if (nrow(d) > 0) {
d$arq <- x
return(d)
}
}))
if (stringr::str_detect(sessionInfo()$running %>% tolower,
"windows")) {
letra_regex <- ".+\\/([a-z])"
}
else {
letra_regex <- ".+//([a-z])"
}
treino$letra <- stringr::str_match(treino$arq, letra_regex)[, 2]
treino <- dplyr::bind_rows(lapply(list.files(path, full.names = TRUE),
function(x) {
d <- readRDS(x)
if (nrow(d) > 0) {
d$arq <- x
return(d)
}
}))
if (stringr::str_detect(sessionInfo()$running %>% tolower,
"windows")) {
letra_regex <- ".+\\/([a-z])"
}
if (stringr::str_detect(sessionInfo()$running %>% tolower,
"windows")) {
letra_regex <- ".+\\/([a-z])"
} else {
letra_regex <- ".+//([a-z])"
}
letra_regex
treino$letra <- stringr::str_match(treino$arq, letra_regex)[, 2]
treino$letra
treino <- dplyr::bind_rows(lapply(list.files(path, full.names = TRUE),
function(x) {
d <- readRDS(x)
if (nrow(d) > 0) {
d$arq <- x
return(d)
}
}))
if (stringr::str_detect(sessionInfo()$running %>% tolower,
"windows")) {
letra_regex <- ".+\\/([a-z])"
} else {
letra_regex <- ".+//([a-z])"
}
treino$letra <- stringr::str_match(treino$arq, letra_regex)[, 2]
d_treino <- treino %>%
group_by(arq) %>%
mutate(x = x - min(x),
y = y - min(y)) %>%
ungroup %>% mutate(xs = sprintf("x%02d", x),
ys = sprintf("y%02d", y)) %>%
unite(xy, xs, ys, sep = "_") %>%
select(arq, xy, letra) %>%
spread(xy, letra, fill = 0) %>%
mutate_each(funs(ifelse(. == "0", 0, 1)), starts_with("x"))
d_treino
d_treino %>% View
d_treino[,200:290] %>% View
d_treino[,"letra"]
treino <- dplyr::bind_rows(lapply(list.files(path, full.names = TRUE),
function(x) {
d <- readRDS(x)
if (nrow(d) > 0) {
d$arq <- x
return(d)
}
}))
if (stringr::str_detect(sessionInfo()$running %>% tolower,
"windows")) {
letra_regex <- ".+\\/([a-z])"
} else {
letra_regex <- ".+//([a-z])"
}
treino$letra <- stringr::str_match(treino$arq, letra_regex)[, 2]
d_treino <- treino %>%
group_by(arq) %>%
mutate(x = x - min(x),
y = y - min(y)) %>%
ungroup %>% mutate(xs = sprintf("x%02d", x),
ys = sprintf("y%02d", y)) %>%
unite(xy, xs, ys, sep = "_") %>%
select(arq, xy, letra)
d_treino
d_treino <- treino %>%
group_by(arq) %>%
mutate(x = x - min(x),
y = y - min(y)) %>%
ungroup %>% mutate(xs = sprintf("x%02d", x),
ys = sprintf("y%02d", y)) %>%
unite(xy, xs, ys, sep = "_") %>%
select(arq, xy, letra) %>%
spread(xy, letra, fill = 0)
d_treino
treino <- dplyr::bind_rows(lapply(list.files(path, full.names = TRUE),
function(x) {
d <- readRDS(x)
if (nrow(d) > 0) {
d$arq <- x
return(d)
}
}))
if (stringr::str_detect(sessionInfo()$running %>% tolower,
"windows")) {
letra_regex <- ".+\\/([a-z])"
} else {
letra_regex <- ".+//([a-z])"
}
treino$letra <- stringr::str_match(treino$arq, letra_regex)[, 2]
d_treino <- treino %>%
group_by(arq) %>%
mutate(x = x - min(x),
y = y - min(y)) %>%
ungroup %>% mutate(xs = sprintf("x%02d", x),
ys = sprintf("y%02d", y)) %>%
unite(xy, xs, ys, sep = "_") %>%
select(arq, xy, letra) %>%
spread(xy, letra, fill = 0) %>%
mutate_each(funs(ifelse(. == "0", 0, 1)), starts_with("x")) %>%
mutate(letra = stringr::str_match(arq, letra_regex)[, 2])
d_treino
d_treino
d_treino <- carregar_treino('inst/treino/')
d_treino$letra <- as.factor(d_treino$letra)
modelo <- tree(letra ~ ., data = select(d_treino, -arq))
treino <- dplyr::bind_rows(lapply(list.files(path, full.names = TRUE),
function(x) {
d <- readRDS(x)
if (nrow(d) > 0) {
d$arq <- x
return(d)
}
}))
if (stringr::str_detect(sessionInfo()$running %>% tolower,
"windows")) {
letra_regex <- ".+\\/([a-z])"
} else {
letra_regex <- ".+//([a-z])"
}
treino$letra <- stringr::str_match(treino$arq, letra_regex)[, 2]
d_treino <- treino %>%
group_by(arq) %>%
mutate(x = x - min(x),
y = y - min(y)) %>%
ungroup %>% mutate(xs = sprintf("x%02d", x),
ys = sprintf("y%02d", y)) %>%
unite(xy, xs, ys, sep = "_") %>%
select(arq, xy, letra) %>%
spread(xy, letra, fill = 0) %>%
mutate_each(funs(ifelse(. == "0", 0, 1)), starts_with("x")) %>%
mutate(letra = stringr::str_match(arq, letra_regex)[, 2])
d_treino
d_treino$letra <- as.factor(d_treino$letra)
modelo <- tree(letra ~ ., data = select(d_treino, -arq))
cv_tree <- cv.tree(modelo)
plot(cv_tree)
modelo <- prune.tree(modelo, best = 25)
save(d_treino, file = 'data/d_treino.rda')
save(modelo, file = 'data/modelo.rda')
d <- ler(baixar()); desenhar(d); prever(d)
d <- ler("arq.png"); desenhar(d); prever(d)
dim(d_treino)
d_treino
modelo_rf <- train(letra ~ ., data = select(d_treino, -arq))
library(caret)
modelo_rf <- train(letra ~ ., data = select(d_treino, -arq))
modelo_rf
getTree(modelo_rf$finalModelo)
getTree(modelo_rf$finalModel)
table(getTree(modelo_rf$finalModel)$prediction)
table(getTree(modelo_rf$finalModel))
x <- getTree(modelo_rf$finalModel)
x
class(x)
x[,1]
x[,5]
x[,7]
x[,6]
x[,6] %>% table
table(d_treino$letra, predict(modelo_rf))
select(d_treino, letra)
set.seed(19900401)
cv_rf <- rfcv(trainx = select(d_treino, -arq, - letra),
trainy = select(d_treino, letra),
cv.fold=5)
dim(select(d_treino, -arq, - letra))
dim(select(d_treino, letra))
dim(cbind(iris[1:4], matrix(runif(96 * nrow(iris)), nrow(iris), 96)))
dim(iris$Species)
trainy = select$letra)
cv_rf <- rfcv(trainx = select(d_treino, -arq, - letra),
trainy = select$letra)
select$letra
cv_rf <- rfcv(trainx = select(d_treino, -arq, - letra),
trainy = d_treino$letra)
cv_rf
getTree(modelo_rf$finalModel, k=144)
table(d_treino$letra, predict(modelo_rf))
modelo_rf_144 <- getTree(modelo_rf$finalModel, k=144)
table(d_treino$letra, predict(modelo_rf_144))
d <- ler("arq.png"); desenhar(d); prever(d)
modelo_rf_144 <- getTree(modelo_rf$finalModel, k=144)
table(d_treino$letra, modelo_rf_144[,"prediction"])
modelo_rf_144[,"prediction"]
modelo_rf_144[,"prediction"] %>% dim
modelo_rf_144[,"prediction"] %>% length
modelo_rf_144[,"prediction"] != 0 %>% sum
(modelo_rf_144[,"prediction"] != 0) %>% sum
cv_rf
cv_rf$predicted$144
cv_rf$predicted
cv_rf$predicted$'144'
table(d_treino$letra, cv_rf$predicted$'144')
cv_rf$error.cv
plot(cv_rf)
with(rf.cv, plot(n.var, error.cv))
with(cv_rf, plot(n.var, error.cv))
with(cv_rf, plot(n.var, error.cv, type = "b"))
modelo_rf
set.seed(19900401)
modelo_rf <- train(letra ~ .,
data = select(d_treino, -arq),
method = "rf",
mtry = 144)
modelo_rf
table(d_treino$letra, predict(modelo_rf))
modelo_rf$finalModel
plot(modelo_rf)
modelo_rf <- train(letra ~ .,
data = select(d_treino, -arq),
method = "rf",
tuneLength = 6)
plot(modelo_rf)
modelo_rf
modelo <- modelo_rf$finalModel
save(modelo, file = 'data/modelo.rda')
d <- ler("arq.png"); desenhar(d); prever(d)
d
desenhar
prever
modelo <- modelo_rf$finalModel
teste <- carregar_teste(d)
teste
nm <- names(select(d_treino, -arq, -letra))
teste[, nm[!nm %in% names(teste)]]
teste[, nm[!nm %in% names(teste)]] <- 0
predicao <- predict(modelo, teste)
predicao
r <- paste0(apply(predicao, 1, function(x) {
names(x[which(x == max(x))[1]])
}), collapse = "")
apply(predicao, 1, function(x) {
names(x[which(x == max(x))[1]])
})
predicao
teste
prever
library(dplyr)
library(tidyr)
library(tree)
library(captchatjsp)
library(caret)
d <- ler("arq.png")
desenhar(d)
# path <- 'inst/treino/'
# classificar(picotar(limpar(d)), 'qmiqx', path)
baixar
b <- baixar()
tempfile()
fix(baixar)
baixar
baixar()
d <- ler(baixar())
d <- ler(baixar())
baixar()
baixar()
load('data/modelo.rda')
modelo
modelo$predicted
modelo
modelo$err.rate
modelo$confusion
modelo$confusion %>% class
library(maggritr)
library(magrittr)
modelo$confusion %>% class
modelo$confusion[modelo$confusion == 0] <- "."
modelo$confusion
modelo$confusion %>% as.data.frame.matrix
modelo$confusion %>% as.data.frame.matrix
d <- ler("arq.png"); desenhar(d); prever(d)
library(dplyr)
library(tidyr)
library(tree)
library(captchatjsp)
library(caret)
d <- ler(baixar())
desenhar(d)
# path <- 'inst/treino/'
# classificar(picotar(limpar(d)), 'qmiqx', path)
d <- ler('arq.png')
desenhar(d)
d_treino <- carregar_treino('inst/treino/')
d_treino$letra <- as.factor(d_treino$letra)
d <- ler("arq.png"); desenhar(d); prever(d)
predict(modelo, newdata=d)
d
prever
teste <- carregar_teste(d)
nm <- names(select(d_treino, -arq, -letra))
teste[, nm[!nm %in% names(teste)]] <- 0
predicao <- predict(modelo, teste)
r <- paste0(apply(predicao, 1, function(x) {
names(x[which(x == max(x))[1]])
}), collapse = "")
r
teste
r
teste <- carregar_teste(d)
nm <- names(select(d_treino, -arq, -letra))
teste[, nm[!nm %in% names(teste)]] <- 0
predicao <- predict(modelo, teste)
predicao
apply(predicao, 1, max)
paste0(apply(predicao, 1, function(x) {
names(x[which(x == max(x))[1]])
})
)
carregar_teste
teste <- carregar_teste(d)
teste
nm <- names(select(d_treino, -arq, -letra))
nm
teste[, nm[!nm %in% names(teste)]] <- 0
teste
predicao <- predict(modelo, teste)
predicao
modelo_rf$finalModel
set.seed(19900401)
modelo_rf <- train(letra ~ .,
data = select(d_treino, -arq),
method = "rf",
tuneLength = 6)
plot(modelo_rf)
plot(modelo_rf)
modelo <- modelo_rf$finalModel
save(modelo, file = 'data/modelo.rda')
teste <- carregar_teste(d)
nm <- names(select(d_treino, -arq, -letra))
teste[, nm[!nm %in% names(teste)]] <- 0
predicao <- predict(modelo, teste)
predicao
r <- paste0(apply(predicao, 1, function(x) {
names(x[which(x == max(x))[1]])
}), collapse = "")
r
predicao
predicao
r
prever
predicao
teste <- carregar_teste(d)
nm <- names(select(d_treino, -arq, -letra))
teste[, nm[!nm %in% names(teste)]] <- 0
predicao <- predict(modelo, teste)
predicao
prever(d)
teste
prever
r <- paste0(apply(predicao, 1, function(x) {
names(x[which(x == max(x))[1]])
}), collapse = "")
r
predicao
teste
predicao
r <- paste0(apply(as.character(predicao), 1, function(x) {
names(x[which(x == max(x))[1]])
}), collapse = "")
r
modelo_tree <- tree(letra ~ ., data = select(d_treino, -arq))
cv_tree <- cv.tree(modelo_tree)
plot(cv_tree)
modelo_tree <- prune.tree(modelo_tree, best = 25)
modelo <- modelo_tree
teste <- carregar_teste(d)
nm <- names(select(d_treino, -arq, -letra))
teste[, nm[!nm %in% names(teste)]] <- 0
predicao <- predict(modelo, teste)
predicao
predicao <- predict(modelo, teste, type = "class")
predicao
r <- paste0(apply(predicao, 1, function(x) {
names(x[which(x == max(x))[1]])
}), collapse = "")
r <- paste0(predicao, collapse = "")
r
modelo <- modelo_rf$finalModel
predicao <- predict(modelo, teste, type = "class")
r <- paste0(predicao, collapse = "")
r
tmp <- tempfile()
tmp
if(stringr::str_detect(sessionInfo()$running %>% tolower, "windows")) { # se o sistema operacional for windows...
stringr::str_detect(sessionInfo()$running %>% tolower, "windows")
stringr::str_detect(sessionInfo()$running %>% tolower, "windows")
stringr::str_detect(sessionInfo()$running %>% tolower, "windows")
stringr::str_detect( tolower(sessionInfo()$running), "windows")
sessionInfo()$running
stringr::str_detect( tolower(sessionInfo()$running), "windows")
is_windows <- function() {
stringr::str_detect( tolower(sessionInfo()$running), "windows")
}
devtools::document(); devtools::install()
is_windows
is_windows()
baixar()
baixar()
baixar()
Sys.which("wget")
